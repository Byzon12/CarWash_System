# Generated by Django 5.2.4 on 2025-07-20 14:14

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('Location', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='StaffProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('work_email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=100)),
                ('last_name', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the staff profile is active.')),
            ],
        ),
        migrations.CreateModel(
            name='StaffRole',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('role_type', models.CharField(choices=[('manager', 'Manager'), ('staff', 'Staff'), ('cleaner', 'Cleaner'), ('security', 'Security'), ('receptionist', 'Receptionist')], default='staff', max_length=50)),
                ('description', models.TextField(blank=True, null=True)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_at', models.DateField(auto_now_add=True, null=True)),
                ('updated_at', models.DateField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='WalkInCustomer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Customer's name", max_length=200)),
                ('phone_number', models.CharField(blank=True, help_text="Customer's phone number", max_length=20, null=True)),
                ('email', models.EmailField(blank=True, help_text="Customer's email", max_length=254, null=True)),
                ('vehicle_plate', models.CharField(help_text='Vehicle plate number', max_length=20)),
                ('vehicle_model', models.CharField(blank=True, help_text='Vehicle model', max_length=100, null=True)),
                ('status', models.CharField(choices=[('waiting', 'Waiting'), ('in_service', 'In Service'), ('completed', 'Completed'), ('left', 'Left')], default='waiting', max_length=20)),
                ('estimated_duration', models.DurationField(blank=True, null=True)),
                ('arrived_at', models.DateTimeField(auto_now_add=True)),
                ('service_started_at', models.DateTimeField(blank=True, null=True)),
                ('service_completed_at', models.DateTimeField(blank=True, null=True)),
                ('total_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('partial', 'Partial'), ('paid', 'Paid')], default='pending', max_length=20)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the customer or service', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Walk-in Customer',
                'verbose_name_plural': 'Walk-in Customers',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WalkInPayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_method', models.CharField(choices=[('mpesa', 'M-Pesa'), ('cash', 'Cash'), ('card', 'Card'), ('bank_transfer', 'Bank Transfer')], max_length=20)),
                ('payment_reference', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('checkout_request_id', models.CharField(blank=True, max_length=100, null=True)),
                ('merchant_request_id', models.CharField(blank=True, max_length=100, null=True)),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True)),
                ('mpesa_response', models.JSONField(blank=True, help_text='M-Pesa STK push response', null=True)),
                ('mpesa_query_response', models.JSONField(blank=True, help_text='M-Pesa transaction query response', null=True)),
                ('callback_response', models.JSONField(blank=True, help_text='M-Pesa callback response', null=True)),
                ('failure_reason', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Walk-in Payment',
                'verbose_name_plural': 'Walk-in Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WalkInTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('paused', 'Paused'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('on_hold', 'On Hold')], default='pending', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('paused_at', models.DateTimeField(blank=True, null=True)),
                ('estimated_duration', models.DurationField(blank=True, null=True)),
                ('actual_duration', models.DurationField(blank=True, null=True)),
                ('progress_percentage', models.IntegerField(default=0, help_text='Task completion percentage (0-100)')),
                ('requires_approval', models.BooleanField(default=False)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('internal_notes', models.TextField(blank=True, help_text='Internal staff notes', null=True)),
                ('quality_rating', models.IntegerField(blank=True, help_text='Quality rating 1-5', null=True)),
                ('customer_feedback', models.TextField(blank=True, null=True)),
                ('final_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('discount_applied', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Walk-in Task',
                'verbose_name_plural': 'Walk-in Tasks',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WalkInTaskTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('estimated_duration', models.DurationField()),
                ('service_items', models.JSONField(default=list, help_text='Standard service items/steps')),
                ('default_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('requires_approval', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Task Template',
                'verbose_name_plural': 'Task Templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('password', models.CharField(max_length=128, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Indicates if the staff member is active.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Location.location')),
            ],
        ),
    ]
