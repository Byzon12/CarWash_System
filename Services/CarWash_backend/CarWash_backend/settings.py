"""
Django settings for CarWash_backend project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from datetime import timedelta
# Load environment variables from a .env file

from dotenv import load_dotenv # type: ignore

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kf+w=&$zt$hd9$)v13t+@9@gai=#%pzvs_h1-710m&%h*!*921'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True



# CORS settings

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
      #  "rest_framework_simplejwt.authentication.JWTAuthentication",
        "Tenant.Authentication.TenantAuthentication", # Custom tenant authentication
       "Staff.Authentication.StaffAuthentication",  # Custom staff authentication
       
        "knox.auth.TokenAuthentication",  # Knox authentication
        
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}
"""

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",  # JWT authentication
        "Tenant.Authentication.TenantAuthentication",  # Custom tenant authentication
        
        "knox.auth.TokenAuthentication",  # Knox authentication
        
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
          "Tenant.Authentication.TenantAuthentication", # Custom tenant authentication
           "rest_framework_simplejwt.authentication.JWTAuthentication", 
        "knox.auth.TokenAuthentication",  # Knox authentication
        
    ),
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}"""

SIMPLE_JWT= {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=180),  # Access token lifetime
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,  # Rotate refresh tokens
    "BLACKLIST_AFTER_ROTATION": True,  # Blacklist old refresh tokens after rotation
    # Refresh token lifetime  
}

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


CORS_ALLOW_ALL_ORIGINS = True  # Allow all origins for development; change in production

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:58147",  # Example for React development server
]


CORS_ALLOW_CREDENTIALS = True  # Allow credentials for CORS requests
CORS_ALLOW_HEADERS = [
    'authorization',
    'content-type', 
    'x-csrftoken',
    'x-requested-with', 
    'accept',
    'accept-encoding',
    'origin',
    'user-agent',   
    'x-csrftoken',
    'x-requested-with',
]


# Application definition

INSTALLED_APPS = [
    'jazzmin',  # Django admin theme
     # Use SimpleAdminConfig for Django admin
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',  # CORS headers
    'Users.apps.UsersConfig',  # Custom user app
    'knox',  # Django REST framework authentication
    'Tenant.apps.TenantConfig',  # Tenant management app
    'Location.apps.LocationConfig',  # Location management app
    'rest_framework_simplejwt.token_blacklist',  # Token blacklist for JWT
    "booking",  # Booking app
    "Staff.apps.StaffConfig",  # Staff management app
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS middleware
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
  #  'django_tenants.middleware.TenantMiddleware' # Middleware for tenant management

]

ROOT_URLCONF = 'CarWash_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                            ],
        },
    },
]

WSGI_APPLICATION = 'CarWash_backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
    #    'ENGINE': 'django_tenants.postgresql_backend',  # Use django-tenants for multi-tenancy
        'ENGINE': 'django.db.backends.postgresql_psycopg2',  # Use
        'NAME': 'Carwash_db',
        'USER': 'postgres',
        # Use your actual database password here
        'PASSWORD': 'Byzone12',
        'HOST': 'localhost',
        'PORT': '5433',  # Default PostgreSQL port is 5432, change if needed
        'ATOMIC_REQUESTS': True,  # Optional: Use atomic requests for better transaction handling
    }      
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
  
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#Custom User Model

AUTHENTICATION_BACKENDS = [
    'Users.authentication.UsernameOrEmailBackend',  # Path to the class above
    'django.contrib.auth.backends.ModelBackend',    # fallback
]

AUTHENTICATION_BACKENDS = [
    'Users.authentication.UsernameOrEmailBackend',  # custom backend
    'django.contrib.auth.backends.ModelBackend',     # default
]


#mail settings

#email back-end
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'byzoneochieng@gmail.com'
EMAIL_HOST_PASSWORD = 'mxvxvpwovnlfsvgq'  # Use App Password if 2FA is enabled
# Default from email
DEFAULT_FROM_EMAIL = 'byzoneochieng@gmail.com'


# 'django_tenants.middleware.TenantMiddleware' can be added to the main MIDDLEWARE list above if needed.


# settings.py

# M-Pesa settings
MPESA_CONSUMER_KEY = os.environ.get('MPESA_CONSUMER_KEY', 'rLQ2D5DBhGoyHwgrw15dGa0U0V3sUFvO0oGhjMaPpJGy7qKE')
MPESA_CONSUMER_SECRET = os.environ.get('MPESA_CONSUMER_SECRET', 'LwXCBI1nRLDps9Ta5Zf1GgcQGRn5hZG50xILRwUP62DtyAGszGXy4nfxZoIMt9DY')
MPESA_SHORT_CODE = os.environ.get('MPESA_SHORT_CODE', '174379')
MPESA_PASSKEY = os.environ.get('MPESA_PASSKEY', 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919')
MPESA_CALLBACK_URL = os.environ.get('MPESA_CALLBACK_URL', 'https://mydomain.com/api/mpesa-callback/')  # Must be HTTPS
MPESA_BASE_URL = os.environ.get('MPESA_BASE_URL', 'https://sandbox.safaricom.co.ke')

# M-Pesa Configuration
MPESA_ENVIRONMENT = 'sandbox'  # Change to 'production' for live
MPESA_CONSUMER_KEY = 'rLQ2D5DBhGoyHwgrw15dGa0U0V3sUFvO0oGhjMaPpJGy7qKE'
MPESA_CONSUMER_SECRET = 'LwXCBI1nRLDps9Ta5Zf1GgcQGRn5hZG50xILRwUP62DtyAGszGXy4nfxZoIMt9DY'
MPESA_SHORT_CODE = '174379'  # Your business short code
MPESA_PASSKEY = 'bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919'
MPESA_CALLBACK_URL = 'https://your-domain.com/api/booking/mpesa-callback/'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'booking.log',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'booking': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Find your current ALLOWED_HOSTS and update it
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '0.0.0.0',
    '192.168.137.43', # my Lenovo IP
]

# Update CORS settings for cross-origin requests
CORS_ALLOW_ALL_ORIGINS = True  # For development only

# Or be more specific with allowed origins
CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:3000",
    "http://127.0.0.1:3000",
    "http://41.89.64.70:8000",  # Replace with your Lenovo IP
    # Add HP laptop IP if needed for web testing
]

# Enable CORS for all headers (development only)
CORS_ALLOW_HEADERS = [
    'authorization',
    'content-type', 
    'x-csrftoken',
    'x-requested-with', 
    'accept',
    'accept-encoding',
    'origin',
    'user-agent',   
]

CORS_ALLOW_CREDENTIALS = True